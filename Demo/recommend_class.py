# -*- coding: utf-8 -*-
"""Recommend class.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MjWtL8gtpjjkwRapii6iIWKtAExnB9CF
"""

class reccommend:
    
    def __init__(self, inp_rest_id, upper_limit, model_nearest_neigbor, rest_data_transformed, recommended_rest):
        self.inp_rest_id = inp_rest_id
        self.upper_limit = upper_limit
        self.rest_data_transformed = rest_data_transformed
        self.model_nearest_neigbor = model_nearest_neigbor
        self.recommended_rest = recommended_rest

    '''
    1) recommend_rating:
    This function implements knn and recommends restaurants based on rating of the input retaurant
    '''
    def recommend_rating(self, inp_rest_id, model_nearest_neigbor, rest_data_transformed, recommended_rest):
        
        neighbor_distances, knc_neigbors = self.model_nearest_neigbor.kneighbors([[self.inp_rest_id]])
        knc_neigbors = knc_neigbors[0]
        print("\nSeven neighbors: ", knc_neigbors)
        print("\nDistance of neighbors: ", neighbor_distances[0], "\n")

        for item in knc_neigbors:
          rest_entry = self.rest_data_transformed.loc[rest_data_transformed['rest_id'] == item]
          self.recommended_rest = self.recommended_rest.append( [rest_entry] )
          self.recommended_rest = self.recommended_rest.sort_values('rate', ascending=False)

        return self.recommended_rest
    
    '''
    2) recommend_online:
    This function implements knn and recommends restaurants which have online deivery option available based on rating of the input retaurant 
    '''
    def recommend_online(self, inp_rest_id, model_nearest_neigbor, rest_data_transformed, recommended_rest):
        rest_online = self.rest_data_transformed[(rest_data_transformed['online_order'] == 'Online')]
        neighbor_distances, knc_neigbors = self.model_nearest_neigbor.kneighbors([[self.inp_rest_id]])
        knc_neigbors = knc_neigbors[0]
        print("\nSeven neighbors: ", knc_neigbors)
        print("\nDistance of neighbors: ", neighbor_distances[0], "\n")
        for item in knc_neigbors:
            rest_entry = rest_online.loc[rest_online['rest_id'] == item]
            self.recommended_rest = self.recommended_rest.append( [rest_entry] )
            self.recommended_rest = self.recommended_rest.sort_values('rate', ascending=False)

        return self.recommended_rest
    
    '''
    3) recommend_according_to_budget:
    This function implements knn and recommends restaurants based on rating of the input retaurant and filters out the restaurants that are outisde the budegt provided by the user
    '''
    def recommend_according_to_budget(self, inp_rest_id, upper_limit, model_nearest_neigbor, rest_data_transformed, recommended_rest):
        rest_budget = self.rest_data_transformed[(rest_data_transformed['approx_cost(for two people)'] <= upper_limit)]

        neighbor_distances, knc_neigbors = self.model_nearest_neigbor.kneighbors([[self.inp_rest_id]])
        knc_neigbors = knc_neigbors[0]
        print("\nSeven neighbors: ", knc_neigbors)
        print("\nDistance of neighbors: ", neighbor_distances[0], "\n")

        for item in knc_neigbors:
            rest_entry = rest_budget.loc[rest_budget['rest_id'] == item]
            self.recommended_rest = self.recommended_rest.append( [rest_entry] )
            self.recommended_rest = self.recommended_rest.sort_values('rate', ascending=False)

        return self.recommended_rest
    
    '''
    4) recommend_according_to_budget_and_online:
    This function implements knn and recommends restaurants which have online deivery option available based on rating of the input retaurant and 
    filters out the restaurants that are outisde the budegt provided by the user
    '''
    def recommend_according_to_budget_and_online(self, inp_rest_id, upper_limit, model_nearest_neigbor, rest_data_transformed, recommended_rest):
       
        rest_online = self.rest_data_transformed[(rest_data_transformed['online_order'] == 'Online')]
        rest_budget = rest_online[(rest_online['approx_cost(for two people)'] <= self.upper_limit)]

        neighbor_distances, knc_neigbors = self.model_nearest_neigbor.kneighbors([[self.inp_rest_id]])
        knc_neigbors = knc_neigbors[0]
        print("\nSeven neighbors: ", knc_neigbors)
        print("\nDistance of neighbors: ", neighbor_distances[0], "\n")

        for item in knc_neigbors:
            rest_entry = rest_budget.loc[rest_budget['rest_id'] == item]
            self.recommended_rest = self.recommended_rest.append( [rest_entry] )
            self.recommended_rest = self.recommended_rest.sort_values('rate', ascending=False)

        return self.recommended_rest